{"version":3,"file":"background.js","mappings":"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","sources":["webpack://nammasuraksha-extension/./config.js","webpack://nammasuraksha-extension/./services/api.js","webpack://nammasuraksha-extension/./background.js"],"sourcesContent":["const config = {\r\n    API_BASE_URL: 'http://localhost:3001/api',\r\n    ENDPOINTS: {\r\n        ANALYZE_MESSAGE: '/analyze/message',\r\n        ANALYZE_HISTORY: '/analyze/history',\r\n        GET_ANALYSIS: '/analyze'\r\n    }\r\n};\r\n\r\nexport default config; ","import config from '../config';\r\n\r\nclass ApiService {\r\n    static async analyzeContent(content, type) {\r\n        try {\r\n            const response = await fetch(`${config.API_BASE_URL}${config.ENDPOINTS.ANALYZE_MESSAGE}`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    content,\r\n                    type\r\n                })\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data.analysis;\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getAnalysisHistory(limit = 10, offset = 0) {\r\n        try {\r\n            const response = await fetch(\r\n                `${config.API_BASE_URL}${config.ENDPOINTS.ANALYZE_HISTORY}?limit=${limit}&offset=${offset}`\r\n            );\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getAnalysis(id) {\r\n        try {\r\n            const response = await fetch(`${config.API_BASE_URL}${config.ENDPOINTS.GET_ANALYSIS}/${id}`);\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error('API Error:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ApiService; ","import ApiService from './services/api';\r\n\r\n// Constants for API endpoints\r\nconst API_ENDPOINT = 'http://localhost:3001/api';\r\n\r\n// Cache for analysis results\r\nconst analysisCache = new Map();\r\nconst CACHE_DURATION = 5 * 60 * 1000; // 5 minutes\r\n\r\n// Initialize extension\r\nchrome.runtime.onInstalled.addListener(() => {\r\n    chrome.storage.local.set({\r\n        threatsBlocked: 0,\r\n        linksScanned: 0\r\n    });\r\n});\r\n\r\n// Function to extract domain from URL\r\nfunction extractDomain(url) {\r\n    try {\r\n        const urlObj = new URL(url);\r\n        return urlObj.hostname;\r\n    } catch {\r\n        return null;\r\n    }\r\n}\r\n\r\n// Function to check if URL is a mail service\r\nfunction isMailService(url) {\r\n    const mailDomains = [\r\n        'mail.google.com',\r\n        'outlook.com',\r\n        'outlook.office.com',\r\n        'outlook.live.com',\r\n        'mail.yahoo.com'\r\n    ];\r\n    const domain = extractDomain(url);\r\n    return mailDomains.some(mailDomain => domain?.includes(mailDomain));\r\n}\r\n\r\n// Quick domain analysis\r\nasync function performQuickDomainAnalysis(url) {\r\n    try {\r\n        const domain = extractDomain(url);\r\n        if (!domain) return null;\r\n\r\n        // Update UI to show analyzing state\r\n        sendMessage({\r\n            type: 'ANALYSIS_STATUS',\r\n            data: {\r\n                type: 'DOMAIN_ANALYSIS',\r\n                threatLevel: 'analyzing',\r\n                message: 'Analyzing domain security...',\r\n                details: {\r\n                    domain: domain\r\n                }\r\n            }\r\n        });\r\n\r\n        const cached = analysisCache.get(domain);\r\n        if (cached && (Date.now() - cached.timestamp) < CACHE_DURATION) {\r\n            sendMessage({\r\n                type: 'ANALYSIS_COMPLETE',\r\n                data: cached.result\r\n            });\r\n            return cached.result;\r\n        }\r\n\r\n        const response = await fetch(`${API_ENDPOINT}/quick/domain`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ domain })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (!data.success) {\r\n            throw new Error(data.error || 'Analysis failed');\r\n        }\r\n\r\n        const result = {\r\n            type: 'DOMAIN_ANALYSIS',\r\n            threatLevel: data.analysis.threatLevel,\r\n            message: `Domain Analysis Complete`,\r\n            details: {\r\n                domain: domain,\r\n                checks: data.analysis.checks,\r\n                recommendations: generateRecommendations(data.analysis)\r\n            }\r\n        };\r\n\r\n        // Cache the results\r\n        analysisCache.set(domain, {\r\n            result,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        // Send results to popup\r\n        sendMessage({\r\n            type: 'ANALYSIS_COMPLETE',\r\n            data: result\r\n        });\r\n\r\n        // Update badge and stats\r\n        updateBadge(result, null);\r\n        updateStats(result);\r\n\r\n        return result;\r\n    } catch (error) {\r\n        console.error('Error in quick domain analysis:', error);\r\n        const errorResult = {\r\n            type: 'ERROR',\r\n            threatLevel: 'error',\r\n            message: 'Failed to analyze domain',\r\n            details: {\r\n                error: error.message\r\n            }\r\n        };\r\n\r\n        sendMessage({\r\n            type: 'ANALYSIS_COMPLETE',\r\n            data: errorResult\r\n        });\r\n\r\n        return errorResult;\r\n    }\r\n}\r\n\r\n// Generate recommendations based on analysis\r\nfunction generateRecommendations(analysis) {\r\n    const recommendations = [];\r\n    \r\n    if (analysis.checks) {\r\n        analysis.checks.forEach(check => {\r\n            if (check.status === 'danger' || check.status === 'warning') {\r\n                recommendations.push({\r\n                    type: check.type,\r\n                    message: check.message,\r\n                    severity: check.status\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return recommendations;\r\n}\r\n\r\n// Function to check if URL is allowed for analysis\r\nfunction isAllowedUrl(url) {\r\n    try {\r\n        const urlObj = new URL(url);\r\n        return !urlObj.protocol.startsWith('chrome') && \r\n               !urlObj.protocol.startsWith('chrome-extension') &&\r\n               !urlObj.protocol.startsWith('about');\r\n    } catch {\r\n        return false;\r\n    }\r\n}\r\n\r\n// Function to analyze email content\r\nasync function analyzeEmailContent(content) {\r\n    try {\r\n        const response = await fetch(`${API_ENDPOINT}/analyze/message`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ content })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return {\r\n            type: 'EMAIL_ANALYSIS',\r\n            threatLevel: data.threatLevel || 'unknown',\r\n            message: data.message || 'Email analysis completed',\r\n            details: {\r\n                scamProbability: data.scamProbability || 0,\r\n                suspiciousLinks: data.suspiciousLinks || [],\r\n                warnings: data.warnings || []\r\n            }\r\n        };\r\n    } catch (error) {\r\n        console.error('Error analyzing email:', error);\r\n        return {\r\n            type: 'EMAIL_ANALYSIS',\r\n            threatLevel: 'unknown',\r\n            message: 'Could not analyze email content',\r\n            details: {\r\n                error: error.message\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Function to analyze webpage content\r\nasync function analyzeWebpage(url, content) {\r\n    try {\r\n        const response = await fetch(`${API_ENDPOINT}/analyze/webpage`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ url, content })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        return {\r\n            type: 'WEBPAGE_ANALYSIS',\r\n            threatLevel: data.threatLevel || 'unknown',\r\n            message: data.message || 'Website analysis completed',\r\n            details: {\r\n                securityScore: data.securityScore || 0,\r\n                threats: data.threats || [],\r\n                recommendations: data.recommendations || []\r\n            }\r\n        };\r\n    } catch (error) {\r\n        console.error('Error analyzing webpage:', error);\r\n        return {\r\n            type: 'WEBPAGE_ANALYSIS',\r\n            threatLevel: 'unknown',\r\n            message: 'Could not analyze webpage content',\r\n            details: {\r\n                error: error.message\r\n            }\r\n        };\r\n    }\r\n}\r\n\r\n// Function to extract email content\r\nasync function extractEmailContent(tabId) {\r\n    try {\r\n        const result = await chrome.scripting.executeScript({\r\n            target: { tabId },\r\n            func: () => {\r\n                // Email content selectors for different email services\r\n                const selectors = {\r\n                    gmail: ['.a3s.aiL', '.ii.gt'],\r\n                    outlook: ['[role=\"main\"]', '.ReadMsgBody'],\r\n                    yahoo: ['[data-test-id=\"message-view\"]', '#msg-body']\r\n                };\r\n\r\n                // Try each selector\r\n                for (const service in selectors) {\r\n                    for (const selector of selectors[service]) {\r\n                        const element = document.querySelector(selector);\r\n                        if (element) {\r\n                            return {\r\n                                content: element.innerText,\r\n                                service: service\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n\r\n        return result[0]?.result;\r\n    } catch (error) {\r\n        console.error('Error extracting email content:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Handle tab updates with quick analysis\r\nchrome.tabs.onUpdated.addListener(async (tabId, changeInfo, tab) => {\r\n    if (changeInfo.status === 'loading' && tab.url) {\r\n        if (isMailService(tab.url)) {\r\n            // For mail services, wait for complete load\r\n            chrome.runtime.sendMessage({\r\n                type: 'ANALYSIS_STATUS',\r\n                data: {\r\n                    type: 'EMAIL_ANALYSIS',\r\n                    threatLevel: 'analyzing',\r\n                    message: 'Waiting for email content...'\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        // For regular websites, do quick domain analysis\r\n        const analysis = await performQuickDomainAnalysis(tab.url);\r\n        if (analysis) {\r\n            chrome.runtime.sendMessage({\r\n                type: 'ANALYSIS_COMPLETE',\r\n                data: analysis\r\n            });\r\n        }\r\n    } else if (changeInfo.status === 'complete') {\r\n        if (isMailService(tab.url)) {\r\n            // For mail services, analyze email content\r\n            await performEmailAnalysis(tabId);\r\n        }\r\n    }\r\n});\r\n\r\n// Update badge with appropriate color and text\r\nfunction updateBadge(analysis, tabId) {\r\n    const colors = {\r\n        low: '#4CAF50',     // Green\r\n        medium: '#FFC107',  // Yellow\r\n        high: '#F44336',    // Red\r\n        analyzing: '#2196F3',// Blue\r\n        error: '#9E9E9E',   // Grey\r\n        unknown: '#9E9E9E'  // Grey\r\n    };\r\n\r\n    const text = {\r\n        low: '✓',\r\n        medium: '!',\r\n        high: '⚠',\r\n        analyzing: '...',\r\n        error: 'X',\r\n        unknown: '?'\r\n    };\r\n\r\n    const color = colors[analysis.threatLevel] || colors.unknown;\r\n    const badgeText = text[analysis.threatLevel] || text.unknown;\r\n\r\n    if (tabId) {\r\n        chrome.action.setBadgeBackgroundColor({ color, tabId });\r\n        chrome.action.setBadgeText({ text: badgeText, tabId });\r\n    } else {\r\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\r\n            if (tabs[0]) {\r\n                chrome.action.setBadgeBackgroundColor({ color, tabId: tabs[0].id });\r\n                chrome.action.setBadgeText({ text: badgeText, tabId: tabs[0].id });\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// Listen for messages from popup and content scripts\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    if (message.type === 'GET_ANALYSIS') {\r\n        handleGetAnalysis(message.tabId);\r\n    } else if (message.type === 'REFRESH_ANALYSIS') {\r\n        handleRefreshAnalysis(message.tabId);\r\n    } else if (message.type === 'GET_QUICK_ANALYSIS') {\r\n        chrome.tabs.get(message.tabId, async (tab) => {\r\n            const analysis = await performQuickDomainAnalysis(tab.url);\r\n            sendResponse(analysis);\r\n        });\r\n        return true; // Required for async response\r\n    }\r\n    return true;\r\n});\r\n\r\n// Handle getting analysis\r\nasync function handleGetAnalysis(tabId) {\r\n    try {\r\n        const analysis = analysisCache.get(tabId);\r\n        if (analysis) {\r\n            sendAnalysisToPopup(analysis);\r\n        } else {\r\n            await performAnalysis(tabId);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error getting analysis:', error);\r\n        sendErrorToPopup('Failed to get analysis');\r\n    }\r\n}\r\n\r\n// Handle refreshing analysis\r\nasync function handleRefreshAnalysis(tabId) {\r\n    try {\r\n        await performAnalysis(tabId);\r\n    } catch (error) {\r\n        console.error('Error refreshing analysis:', error);\r\n        sendErrorToPopup('Failed to refresh analysis');\r\n    }\r\n}\r\n\r\n// Handle tab updates\r\nasync function handleTabUpdate(tabId, tab) {\r\n    try {\r\n        if (tab.url && !tab.url.startsWith('chrome://')) {\r\n            await performAnalysis(tabId);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error handling tab update:', error);\r\n    }\r\n}\r\n\r\n// Perform content analysis\r\nasync function performAnalysis(tabId) {\r\n    try {\r\n        const tab = await chrome.tabs.get(tabId);\r\n        \r\n        // Determine content type and get content\r\n        const isEmail = tab.url.includes('mail.google.com') || \r\n                       tab.url.includes('outlook.com') ||\r\n                       tab.url.includes('yahoo.mail');\r\n        \r\n        let content;\r\n        if (isEmail) {\r\n            content = await getEmailContent(tabId);\r\n        } else {\r\n            content = await getPageContent(tabId);\r\n        }\r\n\r\n        // Get analysis from backend\r\n        const analysis = await ApiService.analyzeContent(content, isEmail ? 'EMAIL' : 'WEBPAGE');\r\n        \r\n        // Cache and send results\r\n        analysisCache.set(tabId, analysis);\r\n        sendAnalysisToPopup(analysis);\r\n\r\n        // Update stats\r\n        updateStats(analysis);\r\n\r\n    } catch (error) {\r\n        console.error('Error performing analysis:', error);\r\n        sendErrorToPopup('Failed to analyze content');\r\n    }\r\n}\r\n\r\n// Get email content\r\nasync function getEmailContent(tabId) {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.tabs.sendMessage(tabId, { type: 'GET_EMAIL_CONTENT' }, response => {\r\n            if (chrome.runtime.lastError) {\r\n                reject(chrome.runtime.lastError);\r\n            } else {\r\n                resolve(response.content);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Get page content\r\nasync function getPageContent(tabId) {\r\n    return new Promise((resolve, reject) => {\r\n        chrome.tabs.sendMessage(tabId, { type: 'GET_PAGE_CONTENT' }, response => {\r\n            if (chrome.runtime.lastError) {\r\n                reject(chrome.runtime.lastError);\r\n            } else {\r\n                resolve(response.content);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n// Send analysis results to popup\r\nfunction sendAnalysisToPopup(analysis) {\r\n    chrome.runtime.sendMessage({\r\n        type: analysis.type === 'EMAIL' ? 'EMAIL_ANALYSIS' : 'WEBPAGE_ANALYSIS',\r\n        data: analysis\r\n    });\r\n}\r\n\r\n// Send error to popup\r\nfunction sendErrorToPopup(message) {\r\n    chrome.runtime.sendMessage({\r\n        type: 'ERROR',\r\n        data: {\r\n            threatLevel: 'error',\r\n            message: message\r\n        }\r\n    });\r\n}\r\n\r\n// Update stats\r\nasync function updateStats(analysis) {\r\n    const stats = await chrome.storage.local.get(['threatsBlocked', 'linksScanned']);\r\n    \r\n    const newStats = {\r\n        threatsBlocked: (stats.threatsBlocked || 0) + (analysis.details?.threats?.length || 0),\r\n        linksScanned: (stats.linksScanned || 0) + (analysis.details?.suspiciousLinks?.length || 0)\r\n    };\r\n    \r\n    await chrome.storage.local.set(newStats);\r\n}\r\n\r\n// Perform email analysis\r\nasync function performEmailAnalysis(tabId) {\r\n    try {\r\n        // Update UI to show analyzing state\r\n        chrome.runtime.sendMessage({\r\n            type: 'ANALYSIS_STATUS',\r\n            data: {\r\n                type: 'EMAIL_ANALYSIS',\r\n                threatLevel: 'analyzing',\r\n                message: 'Analyzing email content...'\r\n            }\r\n        });\r\n\r\n        // Get email content\r\n        const content = await getEmailContent(tabId);\r\n        if (!content) {\r\n            throw new Error('Could not extract email content');\r\n        }\r\n\r\n        // Analyze content\r\n        const analysis = await ApiService.analyzeContent(content, 'EMAIL');\r\n        \r\n        // Cache and send results\r\n        analysisCache.set(tabId, {\r\n            result: analysis,\r\n            timestamp: Date.now()\r\n        });\r\n\r\n        // Send results to popup\r\n        chrome.runtime.sendMessage({\r\n            type: 'ANALYSIS_COMPLETE',\r\n            data: analysis\r\n        });\r\n\r\n        // Update badge\r\n        updateBadge(analysis, tabId);\r\n\r\n        return analysis;\r\n    } catch (error) {\r\n        console.error('Error in email analysis:', error);\r\n        const errorAnalysis = {\r\n            type: 'EMAIL_ANALYSIS',\r\n            threatLevel: 'error',\r\n            message: 'Failed to analyze email',\r\n            details: {\r\n                error: error.message\r\n            }\r\n        };\r\n\r\n        // Send error to popup\r\n        chrome.runtime.sendMessage({\r\n            type: 'ANALYSIS_COMPLETE',\r\n            data: errorAnalysis\r\n        });\r\n\r\n        return errorAnalysis;\r\n    }\r\n}\r\n\r\n// Fix message handling for long-lived connections\r\nlet port = null;\r\n\r\n// Setup long-lived connection\r\nchrome.runtime.onConnect.addListener(function(connectionPort) {\r\n    port = connectionPort;\r\n    port.onDisconnect.addListener(function() {\r\n        port = null;\r\n    });\r\n});\r\n\r\n// Helper function to safely send messages\r\nfunction sendMessage(message) {\r\n    try {\r\n        if (port) {\r\n            port.postMessage(message);\r\n        } else {\r\n            chrome.runtime.sendMessage(message);\r\n        }\r\n    } catch (error) {\r\n        console.error('Error sending message:', error);\r\n    }\r\n} "],"names":["API_BASE_URL","ENDPOINTS","ANALYZE_MESSAGE","ANALYZE_HISTORY","GET_ANALYSIS","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","Number","_toPrimitive","ApiService","_classCallCheck","_analyzeContent","_callee","content","response","data","_context","fetch","concat","config","headers","body","JSON","stringify","ok","status","json","analysis","t0","console","error","_x","_x2","_getAnalysisHistory","_callee2","limit","offset","_args2","_context2","undefined","_getAnalysis","_callee3","id","_context3","_x3","API_ENDPOINT","analysisCache","Map","extractDomain","url","URL","hostname","_unused","isMailService","domain","some","mailDomain","includes","performQuickDomainAnalysis","_performQuickDomainAnalysis","cached","result","errorResult","sendMessage","threatLevel","message","details","get","Date","now","timestamp","success","checks","recommendations","generateRecommendations","set","updateBadge","updateStats","check","severity","tabId","colors","low","medium","high","analyzing","unknown","text","color","badgeText","chrome","action","setBadgeBackgroundColor","setBadgeText","tabs","query","active","currentWindow","_handleGetAnalysis","_callee7","_context7","sendAnalysisToPopup","performAnalysis","sendErrorToPopup","_handleRefreshAnalysis","_callee8","_context8","_x14","_performAnalysis","_callee10","tab","isEmail","_context10","getEmailContent","getPageContent","analyzeContent","_x15","_getEmailContent","_callee11","_context11","reject","runtime","lastError","_x16","_getPageContent","_callee12","_context12","_x17","_updateStats","_callee13","_analysis$details","_analysis$details2","stats","newStats","_context13","storage","local","threatsBlocked","threats","linksScanned","suspiciousLinks","performEmailAnalysis","_x18","_performEmailAnalysis","_callee14","errorAnalysis","_context14","onInstalled","addListener","onUpdated","_ref","changeInfo","_x6","_x7","_x8","onMessage","sender","sendResponse","_x10","handleGetAnalysis","_x11","handleRefreshAnalysis","_ref2","_x9","port","postMessage","onConnect","connectionPort","onDisconnect"],"sourceRoot":""}